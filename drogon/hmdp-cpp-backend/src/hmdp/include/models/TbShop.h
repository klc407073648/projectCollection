/**
 *
 *  TbShop.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;
namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace hmdp 
{

class TbShop
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _name;
        static const std::string _type_id;
        static const std::string _images;
        static const std::string _area;
        static const std::string _address;
        static const std::string _x;
        static const std::string _y;
        static const std::string _avg_price;
        static const std::string _sold;
        static const std::string _comments;
        static const std::string _score;
        static const std::string _open_hours;
        static const std::string _create_time;
        static const std::string _update_time;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = uint64_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names, 
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all 
     * columns by an asterisk), please set the offset to -1.
     */
    explicit TbShop(const Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit TbShop(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    TbShop(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    TbShop() = default;
    
    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson, 
                          std::string &err, 
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const uint64_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getId() const noexcept;

    ///Set the value of the column id
    void setId(const uint64_t &pId) noexcept;


    /**  For column name  */
    ///Get the value of the column name, returns the default value if the column is null
    const std::string &getValueOfName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getName() const noexcept;

    ///Set the value of the column name
    void setName(const std::string &pName) noexcept;
    void setName(std::string &&pName) noexcept;


    /**  For column type_id  */
    ///Get the value of the column type_id, returns the default value if the column is null
    const uint64_t &getValueOfTypeId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getTypeId() const noexcept;

    ///Set the value of the column type_id
    void setTypeId(const uint64_t &pTypeId) noexcept;


    /**  For column images  */
    ///Get the value of the column images, returns the default value if the column is null
    const std::string &getValueOfImages() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getImages() const noexcept;

    ///Set the value of the column images
    void setImages(const std::string &pImages) noexcept;
    void setImages(std::string &&pImages) noexcept;


    /**  For column area  */
    ///Get the value of the column area, returns the default value if the column is null
    const std::string &getValueOfArea() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getArea() const noexcept;

    ///Set the value of the column area
    void setArea(const std::string &pArea) noexcept;
    void setArea(std::string &&pArea) noexcept;
    void setAreaToNull() noexcept;


    /**  For column address  */
    ///Get the value of the column address, returns the default value if the column is null
    const std::string &getValueOfAddress() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAddress() const noexcept;

    ///Set the value of the column address
    void setAddress(const std::string &pAddress) noexcept;
    void setAddress(std::string &&pAddress) noexcept;


    /**  For column x  */
    ///Get the value of the column x, returns the default value if the column is null
    const double &getValueOfX() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getX() const noexcept;

    ///Set the value of the column x
    void setX(const double &pX) noexcept;


    /**  For column y  */
    ///Get the value of the column y, returns the default value if the column is null
    const double &getValueOfY() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getY() const noexcept;

    ///Set the value of the column y
    void setY(const double &pY) noexcept;


    /**  For column avg_price  */
    ///Get the value of the column avg_price, returns the default value if the column is null
    const uint64_t &getValueOfAvgPrice() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getAvgPrice() const noexcept;

    ///Set the value of the column avg_price
    void setAvgPrice(const uint64_t &pAvgPrice) noexcept;
    void setAvgPriceToNull() noexcept;


    /**  For column sold  */
    ///Get the value of the column sold, returns the default value if the column is null
    const uint32_t &getValueOfSold() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getSold() const noexcept;

    ///Set the value of the column sold
    void setSold(const uint32_t &pSold) noexcept;


    /**  For column comments  */
    ///Get the value of the column comments, returns the default value if the column is null
    const uint32_t &getValueOfComments() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getComments() const noexcept;

    ///Set the value of the column comments
    void setComments(const uint32_t &pComments) noexcept;


    /**  For column score  */
    ///Get the value of the column score, returns the default value if the column is null
    const uint32_t &getValueOfScore() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getScore() const noexcept;

    ///Set the value of the column score
    void setScore(const uint32_t &pScore) noexcept;


    /**  For column open_hours  */
    ///Get the value of the column open_hours, returns the default value if the column is null
    const std::string &getValueOfOpenHours() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getOpenHours() const noexcept;

    ///Set the value of the column open_hours
    void setOpenHours(const std::string &pOpenHours) noexcept;
    void setOpenHours(std::string &&pOpenHours) noexcept;
    void setOpenHoursToNull() noexcept;


    /**  For column create_time  */
    ///Get the value of the column create_time, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreateTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreateTime() const noexcept;

    ///Set the value of the column create_time
    void setCreateTime(const ::trantor::Date &pCreateTime) noexcept;
    void setCreateTimeToNull() noexcept;


    /**  For column update_time  */
    ///Get the value of the column update_time, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdateTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdateTime() const noexcept;

    ///Set the value of the column update_time
    void setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept;
    void setUpdateTimeToNull() noexcept;



    static size_t getColumnNumber() noexcept {  return 15;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend Mapper<TbShop>;
#ifdef __cpp_impl_coroutine
    friend CoroMapper<TbShop>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<uint64_t> id_;
    std::shared_ptr<std::string> name_;
    std::shared_ptr<uint64_t> typeId_;
    std::shared_ptr<std::string> images_;
    std::shared_ptr<std::string> area_;
    std::shared_ptr<std::string> address_;
    std::shared_ptr<double> x_;
    std::shared_ptr<double> y_;
    std::shared_ptr<uint64_t> avgPrice_;
    std::shared_ptr<uint32_t> sold_;
    std::shared_ptr<uint32_t> comments_;
    std::shared_ptr<uint32_t> score_;
    std::shared_ptr<std::string> openHours_;
    std::shared_ptr<::trantor::Date> createTime_;
    std::shared_ptr<::trantor::Date> updateTime_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[15]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = ?";
        return sql;                   
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = ?";
        return sql;                   
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "name,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "type_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "images,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "area,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "address,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "x,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "y,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "avg_price,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "sold,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "comments,";
            ++parametersCount;
        }
        if(dirtyFlag_[11])
        {
            sql += "score,";
            ++parametersCount;
        }
        if(dirtyFlag_[12])
        {
            sql += "open_hours,";
            ++parametersCount;
        }
        sql += "create_time,";
        ++parametersCount;
        if(!dirtyFlag_[13])
        {
            needSelection=true;
        }
        sql += "update_time,";
        ++parametersCount;
        if(!dirtyFlag_[14])
        {
            needSelection=true;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";
        
        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[12])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[13])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[14])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;   
    }
};
} // namespace hmdp
} // namespace drogon_model
