/**
 *
 *  TbUserInfo.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;
namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace hmdp 
{

class TbUserInfo
{
  public:
    struct Cols
    {
        static const std::string _user_id;
        static const std::string _city;
        static const std::string _introduce;
        static const std::string _fans;
        static const std::string _followee;
        static const std::string _gender;
        static const std::string _birthday;
        static const std::string _credits;
        static const std::string _level;
        static const std::string _create_time;
        static const std::string _update_time;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = uint64_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names, 
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all 
     * columns by an asterisk), please set the offset to -1.
     */
    explicit TbUserInfo(const Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit TbUserInfo(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    TbUserInfo(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    TbUserInfo() = default;
    
    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson, 
                          std::string &err, 
                          bool isForCreation);

    /**  For column user_id  */
    ///Get the value of the column user_id, returns the default value if the column is null
    const uint64_t &getValueOfUserId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getUserId() const noexcept;

    ///Set the value of the column user_id
    void setUserId(const uint64_t &pUserId) noexcept;


    /**  For column city  */
    ///Get the value of the column city, returns the default value if the column is null
    const std::string &getValueOfCity() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCity() const noexcept;

    ///Set the value of the column city
    void setCity(const std::string &pCity) noexcept;
    void setCity(std::string &&pCity) noexcept;
    void setCityToNull() noexcept;


    /**  For column introduce  */
    ///Get the value of the column introduce, returns the default value if the column is null
    const std::string &getValueOfIntroduce() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getIntroduce() const noexcept;

    ///Set the value of the column introduce
    void setIntroduce(const std::string &pIntroduce) noexcept;
    void setIntroduce(std::string &&pIntroduce) noexcept;
    void setIntroduceToNull() noexcept;


    /**  For column fans  */
    ///Get the value of the column fans, returns the default value if the column is null
    const uint32_t &getValueOfFans() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getFans() const noexcept;

    ///Set the value of the column fans
    void setFans(const uint32_t &pFans) noexcept;
    void setFansToNull() noexcept;


    /**  For column followee  */
    ///Get the value of the column followee, returns the default value if the column is null
    const uint32_t &getValueOfFollowee() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getFollowee() const noexcept;

    ///Set the value of the column followee
    void setFollowee(const uint32_t &pFollowee) noexcept;
    void setFolloweeToNull() noexcept;


    /**  For column gender  */
    ///Get the value of the column gender, returns the default value if the column is null
    const uint8_t &getValueOfGender() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getGender() const noexcept;

    ///Set the value of the column gender
    void setGender(const uint8_t &pGender) noexcept;
    void setGenderToNull() noexcept;


    /**  For column birthday  */
    ///Get the value of the column birthday, returns the default value if the column is null
    const ::trantor::Date &getValueOfBirthday() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getBirthday() const noexcept;

    ///Set the value of the column birthday
    void setBirthday(const ::trantor::Date &pBirthday) noexcept;
    void setBirthdayToNull() noexcept;


    /**  For column credits  */
    ///Get the value of the column credits, returns the default value if the column is null
    const uint32_t &getValueOfCredits() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getCredits() const noexcept;

    ///Set the value of the column credits
    void setCredits(const uint32_t &pCredits) noexcept;
    void setCreditsToNull() noexcept;


    /**  For column level  */
    ///Get the value of the column level, returns the default value if the column is null
    const uint8_t &getValueOfLevel() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getLevel() const noexcept;

    ///Set the value of the column level
    void setLevel(const uint8_t &pLevel) noexcept;
    void setLevelToNull() noexcept;


    /**  For column create_time  */
    ///Get the value of the column create_time, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreateTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreateTime() const noexcept;

    ///Set the value of the column create_time
    void setCreateTime(const ::trantor::Date &pCreateTime) noexcept;


    /**  For column update_time  */
    ///Get the value of the column update_time, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdateTime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdateTime() const noexcept;

    ///Set the value of the column update_time
    void setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept;



    static size_t getColumnNumber() noexcept {  return 11;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend Mapper<TbUserInfo>;
#ifdef __cpp_impl_coroutine
    friend CoroMapper<TbUserInfo>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<uint64_t> userId_;
    std::shared_ptr<std::string> city_;
    std::shared_ptr<std::string> introduce_;
    std::shared_ptr<uint32_t> fans_;
    std::shared_ptr<uint32_t> followee_;
    std::shared_ptr<uint8_t> gender_;
    std::shared_ptr<::trantor::Date> birthday_;
    std::shared_ptr<uint32_t> credits_;
    std::shared_ptr<uint8_t> level_;
    std::shared_ptr<::trantor::Date> createTime_;
    std::shared_ptr<::trantor::Date> updateTime_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[11]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where user_id = ?";
        return sql;                   
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where user_id = ?";
        return sql;                   
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
        if(dirtyFlag_[0])
        {
            sql += "user_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[1])
        {
            sql += "city,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "introduce,";
            ++parametersCount;
        }
        sql += "fans,";
        ++parametersCount;
        if(!dirtyFlag_[3])
        {
            needSelection=true;
        }
        sql += "followee,";
        ++parametersCount;
        if(!dirtyFlag_[4])
        {
            needSelection=true;
        }
        sql += "gender,";
        ++parametersCount;
        if(!dirtyFlag_[5])
        {
            needSelection=true;
        }
        if(dirtyFlag_[6])
        {
            sql += "birthday,";
            ++parametersCount;
        }
        sql += "credits,";
        ++parametersCount;
        if(!dirtyFlag_[7])
        {
            needSelection=true;
        }
        sql += "level,";
        ++parametersCount;
        if(!dirtyFlag_[8])
        {
            needSelection=true;
        }
        sql += "create_time,";
        ++parametersCount;
        if(!dirtyFlag_[9])
        {
            needSelection=true;
        }
        sql += "update_time,";
        ++parametersCount;
        if(!dirtyFlag_[10])
        {
            needSelection=true;
        }
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";
        
        if(dirtyFlag_[0])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        } 
        else
        {
            sql +="default,";
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;   
    }
};
} // namespace hmdp
} // namespace drogon_model
