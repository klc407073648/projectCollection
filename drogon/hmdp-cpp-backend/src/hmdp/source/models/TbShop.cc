/**
 *
 *  TbShop.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include <models/TbShop.h>
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::hmdp;

const std::string TbShop::Cols::_id = "id";
const std::string TbShop::Cols::_name = "name";
const std::string TbShop::Cols::_type_id = "type_id";
const std::string TbShop::Cols::_images = "images";
const std::string TbShop::Cols::_area = "area";
const std::string TbShop::Cols::_address = "address";
const std::string TbShop::Cols::_x = "x";
const std::string TbShop::Cols::_y = "y";
const std::string TbShop::Cols::_avg_price = "avg_price";
const std::string TbShop::Cols::_sold = "sold";
const std::string TbShop::Cols::_comments = "comments";
const std::string TbShop::Cols::_score = "score";
const std::string TbShop::Cols::_open_hours = "open_hours";
const std::string TbShop::Cols::_create_time = "create_time";
const std::string TbShop::Cols::_update_time = "update_time";
const std::string TbShop::primaryKeyName = "id";
const bool TbShop::hasPrimaryKey = true;
const std::string TbShop::tableName = "tb_shop";

const std::vector<typename TbShop::MetaData> TbShop::metaData_={
{"id","uint64_t","bigint(20) unsigned",8,1,1,1},
{"name","std::string","varchar(128)",128,0,0,1},
{"type_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"images","std::string","varchar(1024)",1024,0,0,1},
{"area","std::string","varchar(128)",128,0,0,0},
{"address","std::string","varchar(255)",255,0,0,1},
{"x","double","double",8,0,0,1},
{"y","double","double",8,0,0,1},
{"avg_price","uint64_t","bigint(10) unsigned",8,0,0,0},
{"sold","uint32_t","int(10) unsigned zerofill",4,0,0,1},
{"comments","uint32_t","int(10) unsigned zerofill",4,0,0,1},
{"score","uint32_t","int(2) unsigned zerofill",4,0,0,1},
{"open_hours","std::string","varchar(32)",32,0,0,0},
{"create_time","::trantor::Date","timestamp",0,0,0,0},
{"update_time","::trantor::Date","timestamp",0,0,0,0}
};
const std::string &TbShop::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
TbShop::TbShop(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["name"].isNull())
        {
            name_=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["type_id"].isNull())
        {
            typeId_=std::make_shared<uint64_t>(r["type_id"].as<uint64_t>());
        }
        if(!r["images"].isNull())
        {
            images_=std::make_shared<std::string>(r["images"].as<std::string>());
        }
        if(!r["area"].isNull())
        {
            area_=std::make_shared<std::string>(r["area"].as<std::string>());
        }
        if(!r["address"].isNull())
        {
            address_=std::make_shared<std::string>(r["address"].as<std::string>());
        }
        if(!r["x"].isNull())
        {
            x_=std::make_shared<double>(r["x"].as<double>());
        }
        if(!r["y"].isNull())
        {
            y_=std::make_shared<double>(r["y"].as<double>());
        }
        if(!r["avg_price"].isNull())
        {
            avgPrice_=std::make_shared<uint64_t>(r["avg_price"].as<uint64_t>());
        }
        if(!r["sold"].isNull())
        {
            sold_=std::make_shared<uint32_t>(r["sold"].as<uint32_t>());
        }
        if(!r["comments"].isNull())
        {
            comments_=std::make_shared<uint32_t>(r["comments"].as<uint32_t>());
        }
        if(!r["score"].isNull())
        {
            score_=std::make_shared<uint32_t>(r["score"].as<uint32_t>());
        }
        if(!r["open_hours"].isNull())
        {
            openHours_=std::make_shared<std::string>(r["open_hours"].as<std::string>());
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["update_time"].isNull())
        {
            auto timeStr = r["update_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 15 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            typeId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            images_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            area_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            address_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            x_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            y_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            avgPrice_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            sold_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            comments_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            score_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            openHours_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }

}

TbShop::TbShop(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 15)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());

        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            typeId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            images_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());

        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            area_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());

        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            address_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());

        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            x_=std::make_shared<double>(pJson[pMasqueradingVector[6]].asDouble());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            y_=std::make_shared<double>(pJson[pMasqueradingVector[7]].asDouble());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            avgPrice_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[8]].asUInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            sold_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[9]].asUInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            comments_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[10]].asUInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            score_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[11]].asUInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            openHours_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());

        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[13]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[14]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

TbShop::TbShop(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("type_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["type_id"].isNull())
        {
            typeId_=std::make_shared<uint64_t>((uint64_t)pJson["type_id"].asUInt64());
        }
    }
    if(pJson.isMember("images"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["images"].isNull())
        {
            images_=std::make_shared<std::string>(pJson["images"].asString());
        }
    }
    if(pJson.isMember("area"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["area"].isNull())
        {
            area_=std::make_shared<std::string>(pJson["area"].asString());
        }
    }
    if(pJson.isMember("address"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["address"].isNull())
        {
            address_=std::make_shared<std::string>(pJson["address"].asString());
        }
    }
    if(pJson.isMember("x"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["x"].isNull())
        {
            x_=std::make_shared<double>(pJson["x"].asDouble());
        }
    }
    if(pJson.isMember("y"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["y"].isNull())
        {
            y_=std::make_shared<double>(pJson["y"].asDouble());
        }
    }
    if(pJson.isMember("avg_price"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["avg_price"].isNull())
        {
            avgPrice_=std::make_shared<uint64_t>((uint64_t)pJson["avg_price"].asUInt64());
        }
    }
    if(pJson.isMember("sold"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["sold"].isNull())
        {
            sold_=std::make_shared<uint32_t>((uint32_t)pJson["sold"].asUInt64());
        }
    }
    if(pJson.isMember("comments"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["comments"].isNull())
        {
            comments_=std::make_shared<uint32_t>((uint32_t)pJson["comments"].asUInt64());
        }
    }
    if(pJson.isMember("score"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["score"].isNull())
        {
            score_=std::make_shared<uint32_t>((uint32_t)pJson["score"].asUInt64());
        }
    }
    if(pJson.isMember("open_hours"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["open_hours"].isNull())
        {
            openHours_=std::make_shared<std::string>(pJson["open_hours"].asString());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void TbShop::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 15)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            typeId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            images_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            area_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            address_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            x_=std::make_shared<double>(pJson[pMasqueradingVector[6]].asDouble());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            y_=std::make_shared<double>(pJson[pMasqueradingVector[7]].asDouble());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            avgPrice_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[8]].asUInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            sold_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[9]].asUInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            comments_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[10]].asUInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            score_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[11]].asUInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            openHours_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[13]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[14]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}
                                                                    
void TbShop::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("type_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["type_id"].isNull())
        {
            typeId_=std::make_shared<uint64_t>((uint64_t)pJson["type_id"].asUInt64());
        }
    }
    if(pJson.isMember("images"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["images"].isNull())
        {
            images_=std::make_shared<std::string>(pJson["images"].asString());
        }
    }
    if(pJson.isMember("area"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["area"].isNull())
        {
            area_=std::make_shared<std::string>(pJson["area"].asString());
        }
    }
    if(pJson.isMember("address"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["address"].isNull())
        {
            address_=std::make_shared<std::string>(pJson["address"].asString());
        }
    }
    if(pJson.isMember("x"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["x"].isNull())
        {
            x_=std::make_shared<double>(pJson["x"].asDouble());
        }
    }
    if(pJson.isMember("y"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["y"].isNull())
        {
            y_=std::make_shared<double>(pJson["y"].asDouble());
        }
    }
    if(pJson.isMember("avg_price"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["avg_price"].isNull())
        {
            avgPrice_=std::make_shared<uint64_t>((uint64_t)pJson["avg_price"].asUInt64());
        }
    }
    if(pJson.isMember("sold"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["sold"].isNull())
        {
            sold_=std::make_shared<uint32_t>((uint32_t)pJson["sold"].asUInt64());
        }
    }
    if(pJson.isMember("comments"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["comments"].isNull())
        {
            comments_=std::make_shared<uint32_t>((uint32_t)pJson["comments"].asUInt64());
        }
    }
    if(pJson.isMember("score"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["score"].isNull())
        {
            score_=std::make_shared<uint32_t>((uint32_t)pJson["score"].asUInt64());
        }
    }
    if(pJson.isMember("open_hours"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["open_hours"].isNull())
        {
            openHours_=std::make_shared<std::string>(pJson["open_hours"].asString());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

const uint64_t &TbShop::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &TbShop::getId() const noexcept
{
    return id_;
}
void TbShop::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename TbShop::PrimaryKeyType & TbShop::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &TbShop::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TbShop::getName() const noexcept
{
    return name_;
}
void TbShop::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[1] = true;
}
void TbShop::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[1] = true;
}




const uint64_t &TbShop::getValueOfTypeId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(typeId_)
        return *typeId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &TbShop::getTypeId() const noexcept
{
    return typeId_;
}
void TbShop::setTypeId(const uint64_t &pTypeId) noexcept
{
    typeId_ = std::make_shared<uint64_t>(pTypeId);
    dirtyFlag_[2] = true;
}




const std::string &TbShop::getValueOfImages() const noexcept
{
    const static std::string defaultValue = std::string();
    if(images_)
        return *images_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TbShop::getImages() const noexcept
{
    return images_;
}
void TbShop::setImages(const std::string &pImages) noexcept
{
    images_ = std::make_shared<std::string>(pImages);
    dirtyFlag_[3] = true;
}
void TbShop::setImages(std::string &&pImages) noexcept
{
    images_ = std::make_shared<std::string>(std::move(pImages));
    dirtyFlag_[3] = true;
}




const std::string &TbShop::getValueOfArea() const noexcept
{
    const static std::string defaultValue = std::string();
    if(area_)
        return *area_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TbShop::getArea() const noexcept
{
    return area_;
}
void TbShop::setArea(const std::string &pArea) noexcept
{
    area_ = std::make_shared<std::string>(pArea);
    dirtyFlag_[4] = true;
}
void TbShop::setArea(std::string &&pArea) noexcept
{
    area_ = std::make_shared<std::string>(std::move(pArea));
    dirtyFlag_[4] = true;
}


void TbShop::setAreaToNull() noexcept
{
    area_.reset();
    dirtyFlag_[4] = true;
}


const std::string &TbShop::getValueOfAddress() const noexcept
{
    const static std::string defaultValue = std::string();
    if(address_)
        return *address_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TbShop::getAddress() const noexcept
{
    return address_;
}
void TbShop::setAddress(const std::string &pAddress) noexcept
{
    address_ = std::make_shared<std::string>(pAddress);
    dirtyFlag_[5] = true;
}
void TbShop::setAddress(std::string &&pAddress) noexcept
{
    address_ = std::make_shared<std::string>(std::move(pAddress));
    dirtyFlag_[5] = true;
}




const double &TbShop::getValueOfX() const noexcept
{
    const static double defaultValue = double();
    if(x_)
        return *x_;
    return defaultValue;
}
const std::shared_ptr<double> &TbShop::getX() const noexcept
{
    return x_;
}
void TbShop::setX(const double &pX) noexcept
{
    x_ = std::make_shared<double>(pX);
    dirtyFlag_[6] = true;
}




const double &TbShop::getValueOfY() const noexcept
{
    const static double defaultValue = double();
    if(y_)
        return *y_;
    return defaultValue;
}
const std::shared_ptr<double> &TbShop::getY() const noexcept
{
    return y_;
}
void TbShop::setY(const double &pY) noexcept
{
    y_ = std::make_shared<double>(pY);
    dirtyFlag_[7] = true;
}




const uint64_t &TbShop::getValueOfAvgPrice() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(avgPrice_)
        return *avgPrice_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &TbShop::getAvgPrice() const noexcept
{
    return avgPrice_;
}
void TbShop::setAvgPrice(const uint64_t &pAvgPrice) noexcept
{
    avgPrice_ = std::make_shared<uint64_t>(pAvgPrice);
    dirtyFlag_[8] = true;
}


void TbShop::setAvgPriceToNull() noexcept
{
    avgPrice_.reset();
    dirtyFlag_[8] = true;
}


const uint32_t &TbShop::getValueOfSold() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(sold_)
        return *sold_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &TbShop::getSold() const noexcept
{
    return sold_;
}
void TbShop::setSold(const uint32_t &pSold) noexcept
{
    sold_ = std::make_shared<uint32_t>(pSold);
    dirtyFlag_[9] = true;
}




const uint32_t &TbShop::getValueOfComments() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(comments_)
        return *comments_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &TbShop::getComments() const noexcept
{
    return comments_;
}
void TbShop::setComments(const uint32_t &pComments) noexcept
{
    comments_ = std::make_shared<uint32_t>(pComments);
    dirtyFlag_[10] = true;
}




const uint32_t &TbShop::getValueOfScore() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(score_)
        return *score_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &TbShop::getScore() const noexcept
{
    return score_;
}
void TbShop::setScore(const uint32_t &pScore) noexcept
{
    score_ = std::make_shared<uint32_t>(pScore);
    dirtyFlag_[11] = true;
}




const std::string &TbShop::getValueOfOpenHours() const noexcept
{
    const static std::string defaultValue = std::string();
    if(openHours_)
        return *openHours_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TbShop::getOpenHours() const noexcept
{
    return openHours_;
}
void TbShop::setOpenHours(const std::string &pOpenHours) noexcept
{
    openHours_ = std::make_shared<std::string>(pOpenHours);
    dirtyFlag_[12] = true;
}
void TbShop::setOpenHours(std::string &&pOpenHours) noexcept
{
    openHours_ = std::make_shared<std::string>(std::move(pOpenHours));
    dirtyFlag_[12] = true;
}


void TbShop::setOpenHoursToNull() noexcept
{
    openHours_.reset();
    dirtyFlag_[12] = true;
}


const ::trantor::Date &TbShop::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &TbShop::getCreateTime() const noexcept
{
    return createTime_;
}
void TbShop::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[13] = true;
}


void TbShop::setCreateTimeToNull() noexcept
{
    createTime_.reset();
    dirtyFlag_[13] = true;
}


const ::trantor::Date &TbShop::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &TbShop::getUpdateTime() const noexcept
{
    return updateTime_;
}
void TbShop::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[14] = true;
}


void TbShop::setUpdateTimeToNull() noexcept
{
    updateTime_.reset();
    dirtyFlag_[14] = true;
}


void TbShop::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &TbShop::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "name",
        "type_id",
        "images",
        "area",
        "address",
        "x",
        "y",
        "avg_price",
        "sold",
        "comments",
        "score",
        "open_hours",
        "create_time",
        "update_time"
    };
    return inCols;
}

void TbShop::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTypeId())
        {
            binder << getValueOfTypeId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getImages())
        {
            binder << getValueOfImages();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getArea())
        {
            binder << getValueOfArea();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getAddress())
        {
            binder << getValueOfAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getX())
        {
            binder << getValueOfX();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getY())
        {
            binder << getValueOfY();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getAvgPrice())
        {
            binder << getValueOfAvgPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getSold())
        {
            binder << getValueOfSold();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getComments())
        {
            binder << getValueOfComments();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getScore())
        {
            binder << getValueOfScore();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getOpenHours())
        {
            binder << getValueOfOpenHours();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> TbShop::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    return ret;
}

void TbShop::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTypeId())
        {
            binder << getValueOfTypeId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getImages())
        {
            binder << getValueOfImages();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getArea())
        {
            binder << getValueOfArea();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getAddress())
        {
            binder << getValueOfAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getX())
        {
            binder << getValueOfX();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getY())
        {
            binder << getValueOfY();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getAvgPrice())
        {
            binder << getValueOfAvgPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getSold())
        {
            binder << getValueOfSold();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getComments())
        {
            binder << getValueOfComments();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getScore())
        {
            binder << getValueOfScore();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getOpenHours())
        {
            binder << getValueOfOpenHours();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value TbShop::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getTypeId())
    {
        ret["type_id"]=(Json::UInt64)getValueOfTypeId();
    }
    else
    {
        ret["type_id"]=Json::Value();
    }
    if(getImages())
    {
        ret["images"]=getValueOfImages();
    }
    else
    {
        ret["images"]=Json::Value();
    }
    if(getArea())
    {
        ret["area"]=getValueOfArea();
    }
    else
    {
        ret["area"]=Json::Value();
    }
    if(getAddress())
    {
        ret["address"]=getValueOfAddress();
    }
    else
    {
        ret["address"]=Json::Value();
    }
    if(getX())
    {
        ret["x"]=getValueOfX();
    }
    else
    {
        ret["x"]=Json::Value();
    }
    if(getY())
    {
        ret["y"]=getValueOfY();
    }
    else
    {
        ret["y"]=Json::Value();
    }
    if(getAvgPrice())
    {
        ret["avg_price"]=(Json::UInt64)getValueOfAvgPrice();
    }
    else
    {
        ret["avg_price"]=Json::Value();
    }
    if(getSold())
    {
        ret["sold"]=getValueOfSold();
    }
    else
    {
        ret["sold"]=Json::Value();
    }
    if(getComments())
    {
        ret["comments"]=getValueOfComments();
    }
    else
    {
        ret["comments"]=Json::Value();
    }
    if(getScore())
    {
        ret["score"]=getValueOfScore();
    }
    else
    {
        ret["score"]=Json::Value();
    }
    if(getOpenHours())
    {
        ret["open_hours"]=getValueOfOpenHours();
    }
    else
    {
        ret["open_hours"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    return ret;
}

Json::Value TbShop::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 15)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[1]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getTypeId())
            {
                ret[pMasqueradingVector[2]]=(Json::UInt64)getValueOfTypeId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getImages())
            {
                ret[pMasqueradingVector[3]]=getValueOfImages();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getArea())
            {
                ret[pMasqueradingVector[4]]=getValueOfArea();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getAddress())
            {
                ret[pMasqueradingVector[5]]=getValueOfAddress();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getX())
            {
                ret[pMasqueradingVector[6]]=getValueOfX();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getY())
            {
                ret[pMasqueradingVector[7]]=getValueOfY();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getAvgPrice())
            {
                ret[pMasqueradingVector[8]]=(Json::UInt64)getValueOfAvgPrice();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getSold())
            {
                ret[pMasqueradingVector[9]]=getValueOfSold();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getComments())
            {
                ret[pMasqueradingVector[10]]=getValueOfComments();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getScore())
            {
                ret[pMasqueradingVector[11]]=getValueOfScore();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getOpenHours())
            {
                ret[pMasqueradingVector[12]]=getValueOfOpenHours();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[13]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[14]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getTypeId())
    {
        ret["type_id"]=(Json::UInt64)getValueOfTypeId();
    }
    else
    {
        ret["type_id"]=Json::Value();
    }
    if(getImages())
    {
        ret["images"]=getValueOfImages();
    }
    else
    {
        ret["images"]=Json::Value();
    }
    if(getArea())
    {
        ret["area"]=getValueOfArea();
    }
    else
    {
        ret["area"]=Json::Value();
    }
    if(getAddress())
    {
        ret["address"]=getValueOfAddress();
    }
    else
    {
        ret["address"]=Json::Value();
    }
    if(getX())
    {
        ret["x"]=getValueOfX();
    }
    else
    {
        ret["x"]=Json::Value();
    }
    if(getY())
    {
        ret["y"]=getValueOfY();
    }
    else
    {
        ret["y"]=Json::Value();
    }
    if(getAvgPrice())
    {
        ret["avg_price"]=(Json::UInt64)getValueOfAvgPrice();
    }
    else
    {
        ret["avg_price"]=Json::Value();
    }
    if(getSold())
    {
        ret["sold"]=getValueOfSold();
    }
    else
    {
        ret["sold"]=Json::Value();
    }
    if(getComments())
    {
        ret["comments"]=getValueOfComments();
    }
    else
    {
        ret["comments"]=Json::Value();
    }
    if(getScore())
    {
        ret["score"]=getValueOfScore();
    }
    else
    {
        ret["score"]=Json::Value();
    }
    if(getOpenHours())
    {
        ret["open_hours"]=getValueOfOpenHours();
    }
    else
    {
        ret["open_hours"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    return ret;
}

bool TbShop::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, true))
            return false;
    }
    else
    {
        err="The name column cannot be null";
        return false;
    }
    if(pJson.isMember("type_id"))
    {
        if(!validJsonOfField(2, "type_id", pJson["type_id"], err, true))
            return false;
    }
    else
    {
        err="The type_id column cannot be null";
        return false;
    }
    if(pJson.isMember("images"))
    {
        if(!validJsonOfField(3, "images", pJson["images"], err, true))
            return false;
    }
    else
    {
        err="The images column cannot be null";
        return false;
    }
    if(pJson.isMember("area"))
    {
        if(!validJsonOfField(4, "area", pJson["area"], err, true))
            return false;
    }
    if(pJson.isMember("address"))
    {
        if(!validJsonOfField(5, "address", pJson["address"], err, true))
            return false;
    }
    else
    {
        err="The address column cannot be null";
        return false;
    }
    if(pJson.isMember("x"))
    {
        if(!validJsonOfField(6, "x", pJson["x"], err, true))
            return false;
    }
    else
    {
        err="The x column cannot be null";
        return false;
    }
    if(pJson.isMember("y"))
    {
        if(!validJsonOfField(7, "y", pJson["y"], err, true))
            return false;
    }
    else
    {
        err="The y column cannot be null";
        return false;
    }
    if(pJson.isMember("avg_price"))
    {
        if(!validJsonOfField(8, "avg_price", pJson["avg_price"], err, true))
            return false;
    }
    if(pJson.isMember("sold"))
    {
        if(!validJsonOfField(9, "sold", pJson["sold"], err, true))
            return false;
    }
    else
    {
        err="The sold column cannot be null";
        return false;
    }
    if(pJson.isMember("comments"))
    {
        if(!validJsonOfField(10, "comments", pJson["comments"], err, true))
            return false;
    }
    else
    {
        err="The comments column cannot be null";
        return false;
    }
    if(pJson.isMember("score"))
    {
        if(!validJsonOfField(11, "score", pJson["score"], err, true))
            return false;
    }
    else
    {
        err="The score column cannot be null";
        return false;
    }
    if(pJson.isMember("open_hours"))
    {
        if(!validJsonOfField(12, "open_hours", pJson["open_hours"], err, true))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(13, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(14, "update_time", pJson["update_time"], err, true))
            return false;
    }
    return true;
}
bool TbShop::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 15)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[9] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[10] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[11] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[13].empty())
      {
          if(pJson.isMember(pMasqueradingVector[13]))
          {
              if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[14].empty())
      {
          if(pJson.isMember(pMasqueradingVector[14]))
          {
              if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool TbShop::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, false))
            return false;
    }
    if(pJson.isMember("type_id"))
    {
        if(!validJsonOfField(2, "type_id", pJson["type_id"], err, false))
            return false;
    }
    if(pJson.isMember("images"))
    {
        if(!validJsonOfField(3, "images", pJson["images"], err, false))
            return false;
    }
    if(pJson.isMember("area"))
    {
        if(!validJsonOfField(4, "area", pJson["area"], err, false))
            return false;
    }
    if(pJson.isMember("address"))
    {
        if(!validJsonOfField(5, "address", pJson["address"], err, false))
            return false;
    }
    if(pJson.isMember("x"))
    {
        if(!validJsonOfField(6, "x", pJson["x"], err, false))
            return false;
    }
    if(pJson.isMember("y"))
    {
        if(!validJsonOfField(7, "y", pJson["y"], err, false))
            return false;
    }
    if(pJson.isMember("avg_price"))
    {
        if(!validJsonOfField(8, "avg_price", pJson["avg_price"], err, false))
            return false;
    }
    if(pJson.isMember("sold"))
    {
        if(!validJsonOfField(9, "sold", pJson["sold"], err, false))
            return false;
    }
    if(pJson.isMember("comments"))
    {
        if(!validJsonOfField(10, "comments", pJson["comments"], err, false))
            return false;
    }
    if(pJson.isMember("score"))
    {
        if(!validJsonOfField(11, "score", pJson["score"], err, false))
            return false;
    }
    if(pJson.isMember("open_hours"))
    {
        if(!validJsonOfField(12, "open_hours", pJson["open_hours"], err, false))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(13, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(14, "update_time", pJson["update_time"], err, false))
            return false;
    }
    return true;
}
bool TbShop::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 15)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
      if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
      {
          if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
              return false;
      }
      if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
      {
          if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool TbShop::validJsonOfField(size_t index,
                              const std::string &fieldName,
                              const Json::Value &pJson, 
                              std::string &err, 
                              bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 128)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 128)";
                return false;               
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1024)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1024)";
                return false;               
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 128)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 128)";
                return false;               
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;               
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 32)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 32)";
                return false;               
            }

            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
