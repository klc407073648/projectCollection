/**
 *
 *  TbUserInfo.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include <models/TbUserInfo.h>
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::hmdp;

const std::string TbUserInfo::Cols::_user_id = "user_id";
const std::string TbUserInfo::Cols::_city = "city";
const std::string TbUserInfo::Cols::_introduce = "introduce";
const std::string TbUserInfo::Cols::_fans = "fans";
const std::string TbUserInfo::Cols::_followee = "followee";
const std::string TbUserInfo::Cols::_gender = "gender";
const std::string TbUserInfo::Cols::_birthday = "birthday";
const std::string TbUserInfo::Cols::_credits = "credits";
const std::string TbUserInfo::Cols::_level = "level";
const std::string TbUserInfo::Cols::_create_time = "create_time";
const std::string TbUserInfo::Cols::_update_time = "update_time";
const std::string TbUserInfo::primaryKeyName = "user_id";
const bool TbUserInfo::hasPrimaryKey = true;
const std::string TbUserInfo::tableName = "tb_user_info";

const std::vector<typename TbUserInfo::MetaData> TbUserInfo::metaData_={
{"user_id","uint64_t","bigint(20) unsigned",8,0,1,1},
{"city","std::string","varchar(64)",64,0,0,0},
{"introduce","std::string","varchar(128)",128,0,0,0},
{"fans","uint32_t","int(8) unsigned",4,0,0,0},
{"followee","uint32_t","int(8) unsigned",4,0,0,0},
{"gender","uint8_t","tinyint(1) unsigned",1,0,0,0},
{"birthday","::trantor::Date","date",0,0,0,0},
{"credits","uint32_t","int(8) unsigned",4,0,0,0},
{"level","uint8_t","tinyint(1) unsigned",1,0,0,0},
{"create_time","::trantor::Date","timestamp",0,0,0,1},
{"update_time","::trantor::Date","timestamp",0,0,0,1}
};
const std::string &TbUserInfo::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
TbUserInfo::TbUserInfo(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["user_id"].isNull())
        {
            userId_=std::make_shared<uint64_t>(r["user_id"].as<uint64_t>());
        }
        if(!r["city"].isNull())
        {
            city_=std::make_shared<std::string>(r["city"].as<std::string>());
        }
        if(!r["introduce"].isNull())
        {
            introduce_=std::make_shared<std::string>(r["introduce"].as<std::string>());
        }
        if(!r["fans"].isNull())
        {
            fans_=std::make_shared<uint32_t>(r["fans"].as<uint32_t>());
        }
        if(!r["followee"].isNull())
        {
            followee_=std::make_shared<uint32_t>(r["followee"].as<uint32_t>());
        }
        if(!r["gender"].isNull())
        {
            gender_=std::make_shared<uint8_t>(r["gender"].as<uint8_t>());
        }
        if(!r["birthday"].isNull())
        {
            auto daysStr = r["birthday"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            birthday_=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["credits"].isNull())
        {
            credits_=std::make_shared<uint32_t>(r["credits"].as<uint32_t>());
        }
        if(!r["level"].isNull())
        {
            level_=std::make_shared<uint8_t>(r["level"].as<uint8_t>());
        }
        if(!r["create_time"].isNull())
        {
            auto timeStr = r["create_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["update_time"].isNull())
        {
            auto timeStr = r["update_time"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 11 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            userId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            city_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            introduce_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            fans_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            followee_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            gender_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            birthday_=std::make_shared<::trantor::Date>(t*1000000);
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            credits_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            level_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }

}

TbUserInfo::TbUserInfo(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 11)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            city_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());

        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            introduce_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());

        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            fans_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            followee_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            gender_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            birthday_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            credits_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[7]].asUInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            level_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[8]].asUInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[9]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[10]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

TbUserInfo::TbUserInfo(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<uint64_t>((uint64_t)pJson["user_id"].asUInt64());
        }
    }
    if(pJson.isMember("city"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["city"].isNull())
        {
            city_=std::make_shared<std::string>(pJson["city"].asString());
        }
    }
    if(pJson.isMember("introduce"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["introduce"].isNull())
        {
            introduce_=std::make_shared<std::string>(pJson["introduce"].asString());
        }
    }
    if(pJson.isMember("fans"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["fans"].isNull())
        {
            fans_=std::make_shared<uint32_t>((uint32_t)pJson["fans"].asUInt64());
        }
    }
    if(pJson.isMember("followee"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["followee"].isNull())
        {
            followee_=std::make_shared<uint32_t>((uint32_t)pJson["followee"].asUInt64());
        }
    }
    if(pJson.isMember("gender"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["gender"].isNull())
        {
            gender_=std::make_shared<uint8_t>((uint8_t)pJson["gender"].asUInt64());
        }
    }
    if(pJson.isMember("birthday"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["birthday"].isNull())
        {
            auto daysStr = pJson["birthday"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            birthday_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("credits"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["credits"].isNull())
        {
            credits_=std::make_shared<uint32_t>((uint32_t)pJson["credits"].asUInt64());
        }
    }
    if(pJson.isMember("level"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["level"].isNull())
        {
            level_=std::make_shared<uint8_t>((uint8_t)pJson["level"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void TbUserInfo::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 11)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            city_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            introduce_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            fans_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            followee_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            gender_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            birthday_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            credits_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[7]].asUInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            level_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[8]].asUInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[9]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[10]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}
                                                                    
void TbUserInfo::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("user_id"))
    {
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<uint64_t>((uint64_t)pJson["user_id"].asUInt64());
        }
    }
    if(pJson.isMember("city"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["city"].isNull())
        {
            city_=std::make_shared<std::string>(pJson["city"].asString());
        }
    }
    if(pJson.isMember("introduce"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["introduce"].isNull())
        {
            introduce_=std::make_shared<std::string>(pJson["introduce"].asString());
        }
    }
    if(pJson.isMember("fans"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["fans"].isNull())
        {
            fans_=std::make_shared<uint32_t>((uint32_t)pJson["fans"].asUInt64());
        }
    }
    if(pJson.isMember("followee"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["followee"].isNull())
        {
            followee_=std::make_shared<uint32_t>((uint32_t)pJson["followee"].asUInt64());
        }
    }
    if(pJson.isMember("gender"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["gender"].isNull())
        {
            gender_=std::make_shared<uint8_t>((uint8_t)pJson["gender"].asUInt64());
        }
    }
    if(pJson.isMember("birthday"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["birthday"].isNull())
        {
            auto daysStr = pJson["birthday"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            birthday_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("credits"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["credits"].isNull())
        {
            credits_=std::make_shared<uint32_t>((uint32_t)pJson["credits"].asUInt64());
        }
    }
    if(pJson.isMember("level"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["level"].isNull())
        {
            level_=std::make_shared<uint8_t>((uint8_t)pJson["level"].asUInt64());
        }
    }
    if(pJson.isMember("create_time"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["create_time"].isNull())
        {
            auto timeStr = pJson["create_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["update_time"].isNull())
        {
            auto timeStr = pJson["update_time"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updateTime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

const uint64_t &TbUserInfo::getValueOfUserId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &TbUserInfo::getUserId() const noexcept
{
    return userId_;
}
void TbUserInfo::setUserId(const uint64_t &pUserId) noexcept
{
    userId_ = std::make_shared<uint64_t>(pUserId);
    dirtyFlag_[0] = true;
}



const typename TbUserInfo::PrimaryKeyType & TbUserInfo::getPrimaryKey() const
{
    assert(userId_);
    return *userId_;
}

const std::string &TbUserInfo::getValueOfCity() const noexcept
{
    const static std::string defaultValue = std::string();
    if(city_)
        return *city_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TbUserInfo::getCity() const noexcept
{
    return city_;
}
void TbUserInfo::setCity(const std::string &pCity) noexcept
{
    city_ = std::make_shared<std::string>(pCity);
    dirtyFlag_[1] = true;
}
void TbUserInfo::setCity(std::string &&pCity) noexcept
{
    city_ = std::make_shared<std::string>(std::move(pCity));
    dirtyFlag_[1] = true;
}


void TbUserInfo::setCityToNull() noexcept
{
    city_.reset();
    dirtyFlag_[1] = true;
}


const std::string &TbUserInfo::getValueOfIntroduce() const noexcept
{
    const static std::string defaultValue = std::string();
    if(introduce_)
        return *introduce_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TbUserInfo::getIntroduce() const noexcept
{
    return introduce_;
}
void TbUserInfo::setIntroduce(const std::string &pIntroduce) noexcept
{
    introduce_ = std::make_shared<std::string>(pIntroduce);
    dirtyFlag_[2] = true;
}
void TbUserInfo::setIntroduce(std::string &&pIntroduce) noexcept
{
    introduce_ = std::make_shared<std::string>(std::move(pIntroduce));
    dirtyFlag_[2] = true;
}


void TbUserInfo::setIntroduceToNull() noexcept
{
    introduce_.reset();
    dirtyFlag_[2] = true;
}


const uint32_t &TbUserInfo::getValueOfFans() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(fans_)
        return *fans_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &TbUserInfo::getFans() const noexcept
{
    return fans_;
}
void TbUserInfo::setFans(const uint32_t &pFans) noexcept
{
    fans_ = std::make_shared<uint32_t>(pFans);
    dirtyFlag_[3] = true;
}


void TbUserInfo::setFansToNull() noexcept
{
    fans_.reset();
    dirtyFlag_[3] = true;
}


const uint32_t &TbUserInfo::getValueOfFollowee() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(followee_)
        return *followee_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &TbUserInfo::getFollowee() const noexcept
{
    return followee_;
}
void TbUserInfo::setFollowee(const uint32_t &pFollowee) noexcept
{
    followee_ = std::make_shared<uint32_t>(pFollowee);
    dirtyFlag_[4] = true;
}


void TbUserInfo::setFolloweeToNull() noexcept
{
    followee_.reset();
    dirtyFlag_[4] = true;
}


const uint8_t &TbUserInfo::getValueOfGender() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(gender_)
        return *gender_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &TbUserInfo::getGender() const noexcept
{
    return gender_;
}
void TbUserInfo::setGender(const uint8_t &pGender) noexcept
{
    gender_ = std::make_shared<uint8_t>(pGender);
    dirtyFlag_[5] = true;
}


void TbUserInfo::setGenderToNull() noexcept
{
    gender_.reset();
    dirtyFlag_[5] = true;
}


const ::trantor::Date &TbUserInfo::getValueOfBirthday() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(birthday_)
        return *birthday_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &TbUserInfo::getBirthday() const noexcept
{
    return birthday_;
}
void TbUserInfo::setBirthday(const ::trantor::Date &pBirthday) noexcept
{
    birthday_ = std::make_shared<::trantor::Date>(pBirthday.roundDay());
    dirtyFlag_[6] = true;
}


void TbUserInfo::setBirthdayToNull() noexcept
{
    birthday_.reset();
    dirtyFlag_[6] = true;
}


const uint32_t &TbUserInfo::getValueOfCredits() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(credits_)
        return *credits_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &TbUserInfo::getCredits() const noexcept
{
    return credits_;
}
void TbUserInfo::setCredits(const uint32_t &pCredits) noexcept
{
    credits_ = std::make_shared<uint32_t>(pCredits);
    dirtyFlag_[7] = true;
}


void TbUserInfo::setCreditsToNull() noexcept
{
    credits_.reset();
    dirtyFlag_[7] = true;
}


const uint8_t &TbUserInfo::getValueOfLevel() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(level_)
        return *level_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &TbUserInfo::getLevel() const noexcept
{
    return level_;
}
void TbUserInfo::setLevel(const uint8_t &pLevel) noexcept
{
    level_ = std::make_shared<uint8_t>(pLevel);
    dirtyFlag_[8] = true;
}


void TbUserInfo::setLevelToNull() noexcept
{
    level_.reset();
    dirtyFlag_[8] = true;
}


const ::trantor::Date &TbUserInfo::getValueOfCreateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createTime_)
        return *createTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &TbUserInfo::getCreateTime() const noexcept
{
    return createTime_;
}
void TbUserInfo::setCreateTime(const ::trantor::Date &pCreateTime) noexcept
{
    createTime_ = std::make_shared<::trantor::Date>(pCreateTime);
    dirtyFlag_[9] = true;
}




const ::trantor::Date &TbUserInfo::getValueOfUpdateTime() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &TbUserInfo::getUpdateTime() const noexcept
{
    return updateTime_;
}
void TbUserInfo::setUpdateTime(const ::trantor::Date &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<::trantor::Date>(pUpdateTime);
    dirtyFlag_[10] = true;
}




void TbUserInfo::updateId(const uint64_t id)
{
}

const std::vector<std::string> &TbUserInfo::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "user_id",
        "city",
        "introduce",
        "fans",
        "followee",
        "gender",
        "birthday",
        "credits",
        "level",
        "create_time",
        "update_time"
    };
    return inCols;
}

void TbUserInfo::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getCity())
        {
            binder << getValueOfCity();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getIntroduce())
        {
            binder << getValueOfIntroduce();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getFans())
        {
            binder << getValueOfFans();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getFollowee())
        {
            binder << getValueOfFollowee();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getGender())
        {
            binder << getValueOfGender();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getBirthday())
        {
            binder << getValueOfBirthday();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCredits())
        {
            binder << getValueOfCredits();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getLevel())
        {
            binder << getValueOfLevel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> TbUserInfo::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    return ret;
}

void TbUserInfo::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getCity())
        {
            binder << getValueOfCity();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getIntroduce())
        {
            binder << getValueOfIntroduce();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getFans())
        {
            binder << getValueOfFans();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getFollowee())
        {
            binder << getValueOfFollowee();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getGender())
        {
            binder << getValueOfGender();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getBirthday())
        {
            binder << getValueOfBirthday();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCredits())
        {
            binder << getValueOfCredits();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getLevel())
        {
            binder << getValueOfLevel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getCreateTime())
        {
            binder << getValueOfCreateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value TbUserInfo::toJson() const
{
    Json::Value ret;
    if(getUserId())
    {
        ret["user_id"]=(Json::UInt64)getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getCity())
    {
        ret["city"]=getValueOfCity();
    }
    else
    {
        ret["city"]=Json::Value();
    }
    if(getIntroduce())
    {
        ret["introduce"]=getValueOfIntroduce();
    }
    else
    {
        ret["introduce"]=Json::Value();
    }
    if(getFans())
    {
        ret["fans"]=getValueOfFans();
    }
    else
    {
        ret["fans"]=Json::Value();
    }
    if(getFollowee())
    {
        ret["followee"]=getValueOfFollowee();
    }
    else
    {
        ret["followee"]=Json::Value();
    }
    if(getGender())
    {
        ret["gender"]=getValueOfGender();
    }
    else
    {
        ret["gender"]=Json::Value();
    }
    if(getBirthday())
    {
        ret["birthday"]=getBirthday()->toDbStringLocal();
    }
    else
    {
        ret["birthday"]=Json::Value();
    }
    if(getCredits())
    {
        ret["credits"]=getValueOfCredits();
    }
    else
    {
        ret["credits"]=Json::Value();
    }
    if(getLevel())
    {
        ret["level"]=getValueOfLevel();
    }
    else
    {
        ret["level"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    return ret;
}

Json::Value TbUserInfo::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 11)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getCity())
            {
                ret[pMasqueradingVector[1]]=getValueOfCity();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getIntroduce())
            {
                ret[pMasqueradingVector[2]]=getValueOfIntroduce();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getFans())
            {
                ret[pMasqueradingVector[3]]=getValueOfFans();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getFollowee())
            {
                ret[pMasqueradingVector[4]]=getValueOfFollowee();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getGender())
            {
                ret[pMasqueradingVector[5]]=getValueOfGender();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getBirthday())
            {
                ret[pMasqueradingVector[6]]=getBirthday()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getCredits())
            {
                ret[pMasqueradingVector[7]]=getValueOfCredits();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getLevel())
            {
                ret[pMasqueradingVector[8]]=getValueOfLevel();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getCreateTime())
            {
                ret[pMasqueradingVector[9]]=getCreateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[10]]=getUpdateTime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getUserId())
    {
        ret["user_id"]=(Json::UInt64)getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getCity())
    {
        ret["city"]=getValueOfCity();
    }
    else
    {
        ret["city"]=Json::Value();
    }
    if(getIntroduce())
    {
        ret["introduce"]=getValueOfIntroduce();
    }
    else
    {
        ret["introduce"]=Json::Value();
    }
    if(getFans())
    {
        ret["fans"]=getValueOfFans();
    }
    else
    {
        ret["fans"]=Json::Value();
    }
    if(getFollowee())
    {
        ret["followee"]=getValueOfFollowee();
    }
    else
    {
        ret["followee"]=Json::Value();
    }
    if(getGender())
    {
        ret["gender"]=getValueOfGender();
    }
    else
    {
        ret["gender"]=Json::Value();
    }
    if(getBirthday())
    {
        ret["birthday"]=getBirthday()->toDbStringLocal();
    }
    else
    {
        ret["birthday"]=Json::Value();
    }
    if(getCredits())
    {
        ret["credits"]=getValueOfCredits();
    }
    else
    {
        ret["credits"]=Json::Value();
    }
    if(getLevel())
    {
        ret["level"]=getValueOfLevel();
    }
    else
    {
        ret["level"]=Json::Value();
    }
    if(getCreateTime())
    {
        ret["create_time"]=getCreateTime()->toDbStringLocal();
    }
    else
    {
        ret["create_time"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getUpdateTime()->toDbStringLocal();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    return ret;
}

bool TbUserInfo::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(0, "user_id", pJson["user_id"], err, true))
            return false;
    }
    else
    {
        err="The user_id column cannot be null";
        return false;
    }
    if(pJson.isMember("city"))
    {
        if(!validJsonOfField(1, "city", pJson["city"], err, true))
            return false;
    }
    if(pJson.isMember("introduce"))
    {
        if(!validJsonOfField(2, "introduce", pJson["introduce"], err, true))
            return false;
    }
    if(pJson.isMember("fans"))
    {
        if(!validJsonOfField(3, "fans", pJson["fans"], err, true))
            return false;
    }
    if(pJson.isMember("followee"))
    {
        if(!validJsonOfField(4, "followee", pJson["followee"], err, true))
            return false;
    }
    if(pJson.isMember("gender"))
    {
        if(!validJsonOfField(5, "gender", pJson["gender"], err, true))
            return false;
    }
    if(pJson.isMember("birthday"))
    {
        if(!validJsonOfField(6, "birthday", pJson["birthday"], err, true))
            return false;
    }
    if(pJson.isMember("credits"))
    {
        if(!validJsonOfField(7, "credits", pJson["credits"], err, true))
            return false;
    }
    if(pJson.isMember("level"))
    {
        if(!validJsonOfField(8, "level", pJson["level"], err, true))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(9, "create_time", pJson["create_time"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(10, "update_time", pJson["update_time"], err, true))
            return false;
    }
    return true;
}
bool TbUserInfo::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 11)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool TbUserInfo::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(0, "user_id", pJson["user_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("city"))
    {
        if(!validJsonOfField(1, "city", pJson["city"], err, false))
            return false;
    }
    if(pJson.isMember("introduce"))
    {
        if(!validJsonOfField(2, "introduce", pJson["introduce"], err, false))
            return false;
    }
    if(pJson.isMember("fans"))
    {
        if(!validJsonOfField(3, "fans", pJson["fans"], err, false))
            return false;
    }
    if(pJson.isMember("followee"))
    {
        if(!validJsonOfField(4, "followee", pJson["followee"], err, false))
            return false;
    }
    if(pJson.isMember("gender"))
    {
        if(!validJsonOfField(5, "gender", pJson["gender"], err, false))
            return false;
    }
    if(pJson.isMember("birthday"))
    {
        if(!validJsonOfField(6, "birthday", pJson["birthday"], err, false))
            return false;
    }
    if(pJson.isMember("credits"))
    {
        if(!validJsonOfField(7, "credits", pJson["credits"], err, false))
            return false;
    }
    if(pJson.isMember("level"))
    {
        if(!validJsonOfField(8, "level", pJson["level"], err, false))
            return false;
    }
    if(pJson.isMember("create_time"))
    {
        if(!validJsonOfField(9, "create_time", pJson["create_time"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(10, "update_time", pJson["update_time"], err, false))
            return false;
    }
    return true;
}
bool TbUserInfo::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 11)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e) 
    {
      err = e.what();
      return false;
    }
    return true;
}
bool TbUserInfo::validJsonOfField(size_t index,
                                  const std::string &fieldName,
                                  const Json::Value &pJson, 
                                  std::string &err, 
                                  bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 64)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 64)";
                return false;               
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 128)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 128)";
                return false;               
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
